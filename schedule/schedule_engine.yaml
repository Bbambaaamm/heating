# =====================================================================
# ROZVRH – SCHEDULE ENGINE (více zón)
# ---------------------------------------------------------------------
# Cíl:
# Přenastavit teploty hlavic podle rozvrhových časů (start/end)
# a aktuálního topného režimu (Auto / Eco / Boost / Off).
#
# Základní logika:
# - Počítá komfortní teplotu z poslední uživatelské hodnoty (sensor.last_user_temp_*)
# - Aplikuje offset v režimu Eco (např. –1 °C)
# - Na konci komfortního okna nastaví útlumovou teplotu (setback)
#
# Vstupy:
# - input_datetime.*_start / *_end (časy rozvrhu)
# - input_boolean.schedule_enable_* (aktivace rozvrhu)
# - input_select.topny_rezim (globální režim topení)
#
# Výstupy:
# - climate.* (nastavení teploty hlavic)
# =====================================================================

# ---------------------------------------------------------------------
# Globální šablony – výpočet komfortního offsetu a útlumové teploty
# ---------------------------------------------------------------------
template:
  - sensor:
      # Offset komfortní teploty podle režimu (Eco snižuje o 1 °C)
      - name: "heating_mode_comfort_offset_c"
        unique_id: heating_mode_comfort_offset_c
        unit_of_measurement: "°C"
        state: >
          {% set mode = states('input_select.topny_rezim') %}
          {{ 1.0 if mode == 'Eco' else 0.0 }}                  # v režimu Eco použij offset 1°C, jinak 0

      # Globální útlumová teplota (setback)
      - name: "heating_setback_temp_c"
        unique_id: heating_setback_temp_c
        unit_of_measurement: "°C"
        state: "17" # konstantní hodnota (případně změň)

# ---------------------------------------------------------------------
# Pomocné skripty – sdílená logika pro komfort a útlum
# ---------------------------------------------------------------------
script:
  # Nastaví danou zónu na komfortní teplotu
  schedule_set_zone_comfort:
    alias: "Schedule: set zone comfort"
    mode: queued
    fields:
      climate_entity: # cílová climate.* entita
        description: "climate.* entita hlavice"
      last_user_temp_sensor: # zdroj poslední komfortní teploty
        description: "sensor.last_user_temp_* pro danou zónu"
    sequence:
      - variables:
          mode: "{{ states('input_select.topny_rezim') }}" # aktuální režim topení
          base: "{{ states(last_user_temp_sensor) | float(21) }}" # výchozí komfort (fallback 21)
          eco_off: "{{ states('sensor.heating_mode_comfort_offset_c') | float(0) }}" # offset v Eco
          target: > # výsledná cílová teplota
            {% if mode == 'Eco' %}
              {{ (base - eco_off) | round(1) }}
            {% else %}
              {{ base | round(1) }}
            {% endif %}

      # Přepni na heat jen pokud už není, ať neprovokujeme zbytečné změny režimu
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states(climate_entity) | lower != 'heat' }}" # není v režimu heat?
            sequence:
              - action: climate.set_hvac_mode
                data:
                  entity_id: "{{ climate_entity }}" # cílová hlavice
                  hvac_mode: heat # zapnout topení

      # Guard: nepiš stejnou teplotu znovu (±0.1 °C tolerance)
      - condition: template
        value_template: >
          {{ (state_attr(climate_entity, 'temperature') | float(0) - (target | float(0))) | abs > 0.1 }}

      # Nastav cílovou teplotu
      - action: climate.set_temperature
        data:
          entity_id: "{{ climate_entity }}" # cílová hlavice
          temperature: "{{ target }}" # vypočtená komfortní teplota

      # Záznam do logbooku – pouze při reálné změně
      - action: logbook.log
        data:
          name: "{{ climate_entity.split('.')[-1] | replace('_',' ') | title }}"
          message: "Rozvrh – nastavena komfortní teplota: {{ target }} °C"
          entity_id: "{{ climate_entity }}"

  # Nastaví danou zónu na útlumovou teplotu (setback)
  schedule_set_zone_setback:
    alias: "Schedule: set zone setback"
    mode: queued
    fields:
      climate_entity:
        description: "climate.* entita hlavice"
    sequence:
      - variables:
          setback: "{{ states('sensor.heating_setback_temp_c') | float(17) }}" # cílový útlum

      # Přepni na heat jen pokud už není (některé hlavice ignorují set_temperature v off)
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states(climate_entity) | lower != 'heat' }}"
            sequence:
              - action: climate.set_hvac_mode
                data:
                  entity_id: "{{ climate_entity }}"
                  hvac_mode: heat

      # Guard: nepiš stejnou teplotu znovu (±0.1 °C)
      - condition: template
        value_template: >
          {{ (state_attr(climate_entity, 'temperature') | float(0) - (setback | float(0))) | abs > 0.1 }}

      # Nastav útlumovou teplotu
      - action: climate.set_temperature
        data:
          entity_id: "{{ climate_entity }}"
          temperature: "{{ setback }}"

      # Záznam do logbooku – pouze při reálné změně
      - action: logbook.log
        data:
          name: "{{ climate_entity.split('.')[-1] | replace('_',' ') | title }}"
          message: "Rozvrh – nastavena útlumová teplota: {{ setback }} °C"
          entity_id: "{{ climate_entity }}"

# ---------------------------------------------------------------------
# AUTOMATIZACE – události start/end pro jednotlivé zóny
# ---------------------------------------------------------------------
automation:
  # ==============================================================================================================================================================================
  # PŘÍZEMÍ – MICHAL
  # ==============================================================================================================================================================================

  - id: sched_prizemi_michal_start
    alias: "Rozvrh: Přízemí Michal – START komfortního okna"
    mode: restart
    triggers:
      - trigger: template
        value_template: "{{ now().strftime('%H:%M') == start_time[:5] }}" # start Po,út,st,čt,pá,so,ne
    condition:
      - condition: state
        entity_id: input_boolean.schedule_enable_prizemi_michal
        state: "on" # rozvrh aktivní
      - condition: template
        value_template: "{{ states('input_select.topny_rezim') != 'Off' }}" # Off = nic nedělej
    action:
      - action: script.schedule_set_zone_comfort
        data:
          climate_entity: climate.prizemi_michal # cílová hlavice
          last_user_temp_sensor: sensor.last_user_temp_prizemi_michal

  - id: sched_prizemi_michal_end
    alias: "Rozvrh: Přízemí Michal – KONEC komfortního okna → útlum"
    mode: restart
    triggers:
      - trigger: template
        value_template: "{{ now().strftime('%H:%M') == end_time[:5] }}" # end Po,út,st,čt,pá,so,ne
    condition:
      - condition: state
        entity_id: input_boolean.schedule_enable_prizemi_michal
        state: "on"
      - condition: template
        value_template: "{{ states('binary_sensor.kotel_boost_active') == 'off' }}" # Boost má přednost
    action:
      - action: script.schedule_set_zone_setback
        data:
          climate_entity: climate.prizemi_michal

  # ==============================================================================================================================================================================
  # 1. PATRO – KUCHYŇ
  # ==============================================================================================================================================================================

  - id: sched_1p_jidelna_start
    alias: "Rozvrh: 1. patro Kuchyň – START komfortního okna"
    mode: restart
    triggers:
      - trigger: template
        value_template: "{{ now().strftime('%H:%M') == start_time[:5] }}" # start Po,út,st,čt,pá,so,ne
    condition:
      - condition: state
        entity_id: input_boolean.schedule_enable_1p_jidelna
        state: "on"
      - condition: template
        value_template: "{{ states('input_select.topny_rezim') != 'Off' }}" # Off = nic nedělej
    action:
      - action: script.schedule_set_zone_comfort
        data:
          climate_entity: climate.1p_jidelna
          last_user_temp_sensor: sensor.last_user_temp_1p_jidelna

  - id: sched_1p_jidelna_end
    alias: "Rozvrh: 1. patro Kuchyň – KONEC komfortního okna → útlum"
    mode: restart
    triggers:
      - trigger: template
        value_template: "{{ now().strftime('%H:%M') == end_time[:5] }}" # end Po,út,st,čt,pá,so,ne
    condition:
      - condition: state
        entity_id: input_boolean.schedule_enable_1p_jidelna
        state: "on"
      - condition: template
        value_template: "{{ states('binary_sensor.kotel_boost_active') == 'off' }}" # Boost má přednost
    action:
      - action: script.schedule_set_zone_setback
        data:
          climate_entity: climate.1p_jidelna

  # ==============================================================================================================================================================================
  # 2. PATRO – MÁMA
  # ==============================================================================================================================================================================

  - id: sched_2p_mama_start
    alias: "Rozvrh: 2. patro Máma – START komfortního okna"
    mode: restart
    triggers:
      - trigger: template
        value_template: "{{ now().strftime('%H:%M') == start_time[:5] }}" # start Po,út,st,čt,pá,so,ne
    condition:
      - condition: state
        entity_id: input_boolean.schedule_enable_2p_mama
        state: "on"
      - condition: template
        value_template: "{{ states('input_select.topny_rezim') != 'Off' }}" # Off = nic nedělej
    action:
      - action: script.schedule_set_zone_comfort
        data:
          climate_entity: climate.2p_mama
          last_user_temp_sensor: sensor.last_user_temp_2p_mama

  - id: sched_2p_mama_end
    alias: "Rozvrh: 2. patro Máma – KONEC komfortního okna → útlum"
    mode: restart
    triggers:
      - trigger: template
        value_template: "{{ now().strftime('%H:%M') == end_time[:5] }}" # start Po,út,st,čt,pá,so,ne
    condition:
      - condition: state
        entity_id: input_boolean.schedule_enable_2p_mama
        state: "on"
      - condition: template
        value_template: "{{ states('binary_sensor.kotel_boost_active') == 'off' }}" # Boost má přednost
    action:
      - action: script.schedule_set_zone_setback
        data:
          climate_entity: climate.2p_mama
