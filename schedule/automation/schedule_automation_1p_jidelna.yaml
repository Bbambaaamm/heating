# =====================================================================
# 📅 ROZVRH – 1. patro (Kuchyň) – inteligentní spouštění
# ---------------------------------------------------------------------
# 🎯 Cíl:
# - Spouští režim Komfort/ECO pouze při SKUTEČNÉ změně (čas, ruční zásah),
#   čímž se zabrání zbytečným přepínáním hlavice a zahlcení logů.
# - Uvnitř komfortního okna: nastaví poslední uloženou komfortní teplotu
#   (input_number.1p_jidelna_last_comfort)
# - Mimo komfortní okno: přepne na útlumovou (ECO) teplotu
#   (input_number.eco_temp_default)
#
# 💡 Efekt:
# - Žádné cyklické přepisování, hlavice reaguje jen na smysluplné změny.
# - Inteligentní ochrana proti kolizi s capture automatikou.
# =====================================================================

automation:
  - alias: "Rozvrh 1P Kuchyň – inteligentní spouštění"          # Název automatiky v UI
    id: schedule_1p_jidelna_smart                               # Stabilní ID (pro odkazy, scény, UI editory)
    mode: restart                                               # Při nové události restartuj běh (předchází překryvu)
    initial_state: true                                         # Automatika aktivní ihned po startu HA

    # ---------------------------------------------------------------
    # 🔔 Spouštěče – reagujeme jen na skutečné změny (ne každou minutu)
    # ---------------------------------------------------------------
    trigger:
      - platform: time                                          # Spuštění při časech začátku/konce komfortního okna
        at:
          - input_datetime.1p_jidelna_monday_start
          - input_datetime.1p_jidelna_monday_end
          - input_datetime.1p_jidelna_tuesday_start
          - input_datetime.1p_jidelna_tuesday_end
          - input_datetime.1p_jidelna_wednesday_start
          - input_datetime.1p_jidelna_wednesday_end
          - input_datetime.1p_jidelna_thursday_start
          - input_datetime.1p_jidelna_thursday_end
          - input_datetime.1p_jidelna_friday_start
          - input_datetime.1p_jidelna_friday_end
          - input_datetime.1p_jidelna_saturday_start
          - input_datetime.1p_jidelna_saturday_end
          - input_datetime.1p_jidelna_sunday_start
          - input_datetime.1p_jidelna_sunday_end

      - platform: state                                         # Při změně rozvrhových časů nebo enable přepínače
        entity_id:
          - input_datetime.1p_jidelna_monday_start
          - input_datetime.1p_jidelna_monday_end
          - input_datetime.1p_jidelna_tuesday_start
          - input_datetime.1p_jidelna_tuesday_end
          - input_datetime.1p_jidelna_wednesday_start
          - input_datetime.1p_jidelna_wednesday_end
          - input_datetime.1p_jidelna_thursday_start
          - input_datetime.1p_jidelna_thursday_end
          - input_datetime.1p_jidelna_friday_start
          - input_datetime.1p_jidelna_friday_end
          - input_datetime.1p_jidelna_saturday_start
          - input_datetime.1p_jidelna_saturday_end
          - input_datetime.1p_jidelna_sunday_start
          - input_datetime.1p_jidelna_sunday_end
          - input_boolean.schedule_enable_1p_jidelna

      - platform: state                                         # Změna poslední komfortní teploty v HA
        entity_id: input_number.1p_jidelna_last_comfort

      - platform: state                                         # Ruční zásah na hlavici – sleduj změnu setpointu
        entity_id: climate.1p_jidelna
        attribute: temperature

    # ---------------------------------------------------------------
    # 📊 Proměnné – výpočet aktuálních parametrů
    # ---------------------------------------------------------------
    variables:
      eco_temp: "{{ states('input_number.eco_temp_default') | float(18) }}"   # Výchozí ECO teplota
      last_comfort: "{{ states('input_number.1p_jidelna_last_comfort') | float(22) }}" # Poslední komfortní teplota

      # Dynamický výběr časů dle dne v týdnu (0=Po .. 6=Ne)
      start: >
        {% set d = now().weekday() %}
        {% if   d == 0 %} {{ states('input_datetime.1p_jidelna_monday_start') }}
        {% elif d == 1 %} {{ states('input_datetime.1p_jidelna_tuesday_start') }}
        {% elif d == 2 %} {{ states('input_datetime.1p_jidelna_wednesday_start') }}
        {% elif d == 3 %} {{ states('input_datetime.1p_jidelna_thursday_start') }}
        {% elif d == 4 %} {{ states('input_datetime.1p_jidelna_friday_start') }}
        {% elif d == 5 %} {{ states('input_datetime.1p_jidelna_saturday_start') }}
        {% else %}         {{ states('input_datetime.1p_jidelna_sunday_start') }}
        {% endif %}

      end: >
        {% set d = now().weekday() %}
        {% if   d == 0 %} {{ states('input_datetime.1p_jidelna_monday_end') }}
        {% elif d == 1 %} {{ states('input_datetime.1p_jidelna_tuesday_end') }}
        {% elif d == 2 %} {{ states('input_datetime.1p_jidelna_wednesday_end') }}
        {% elif d == 3 %} {{ states('input_datetime.1p_jidelna_thursday_end') }}
        {% elif d == 4 %} {{ states('input_datetime.1p_jidelna_friday_end') }}
        {% elif d == 5 %} {{ states('input_datetime.1p_jidelna_saturday_end') }}
        {% else %}         {{ states('input_datetime.1p_jidelna_sunday_end') }}
        {% endif %}

      now_hms: "{{ now().strftime('%H:%M:%S') }}"               # Aktuální čas (HH:MM:SS)
      in_window: >                                              # Určení, zda jsme „v okně“ komfortu
        {% set s = start %}
        {% set e = end %}
        {% set n = now_hms %}
        {% if s <= e %}
          {{ s <= n < e }}                                     # Běžný interval (např. 06–22)
        {% else %}
          {{ (n >= s) or (n < e) }}                            # Přes půlnoc (např. 22–06)
        {% endif %}

    # ---------------------------------------------------------------
    # ✅ Podmínka – rozvrh musí být aktivní
    # ---------------------------------------------------------------
    condition:
      - condition: state
        entity_id: input_boolean.schedule_enable_1p_jidelna
        state: "on"

    # ---------------------------------------------------------------
    # ⚙️ Akce – jednorázové přepnutí na Komfort nebo ECO
    # ---------------------------------------------------------------
    action:
      # 🕒 Debounce: pokud spustila hlavice (ruční zásah), zpoždění 1 s
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ trigger.platform == 'state'
                     and trigger.entity_id == 'climate.1p_jidelna' }}
            sequence:
              - delay: "00:00:01"

      # 🔸 Hlavní rozhodování – Komfort nebo ECO
      - choose:
          # ✅ Uvnitř komfortního okna → nastav poslední komfortní teplotu
          - conditions:
              - condition: template
                value_template: "{{ in_window }}"
            sequence:
              - service: climate.set_hvac_mode
                target: { entity_id: climate.1p_jidelna }        # Nastav režim topení
                data: { hvac_mode: heat }
              - condition: template                              # Nezasahuj, pokud už teplota odpovídá
                value_template: >
                  {{ ((state_attr('climate.1p_jidelna','temperature') | float)
                      - (last_comfort | float)) | abs > 0.1 }}
              - service: climate.set_temperature
                target: { entity_id: climate.1p_jidelna }
                data:
                  temperature: "{{ last_comfort }}"              # Nastav komfortní teplotu
              - service: logbook.log                             # Zapiš do logbooku
                data:
                  name: "Rozvrh 1P Kuchyň"
                  message: "Komfortní režim {{ last_comfort }} °C (inteligentní spuštění)"
                  entity_id: climate.1p_jidelna

          # 💤 Mimo komfortní okno → nastav ECO teplotu
          - conditions:
              - condition: template
                value_template: "{{ not in_window }}"
            sequence:
              - service: climate.set_hvac_mode
                target: { entity_id: climate.1p_jidelna }
                data: { hvac_mode: heat }
              - condition: template                              # Nezasahuj, pokud je už stejná teplota
                value_template: >
                  {{ ((state_attr('climate.1p_jidelna','temperature') | float)
                      - (eco_temp | float)) | abs > 0.1 }}
              - service: climate.set_temperature
                target: { entity_id: climate.1p_jidelna }
                data:
                  temperature: "{{ eco_temp }}"                  # Nastav ECO teplotu
              - service: logbook.log
                data:
                  name: "Rozvrh 1P Kuchyň"
                  message: "ECO {{ eco_temp }} °C (inteligentní spuštění)"
                  entity_id: climate.1p_jidelna
