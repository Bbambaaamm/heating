# =====================================================================
# üéöÔ∏è MODE_ENGINE.YAML ‚Äì GLOB√ÅLN√ç ≈ò√çZEN√ç RE≈ΩIM≈Æ TOPEN√ç
# =====================================================================
# üìå C√çL:
# Tento modul ≈ô√≠d√≠ **glob√°ln√≠ re≈æimy topen√≠** a urƒçuje √∫ƒçinn√© prahy,
# kter√© pou≈æ√≠v√° logika kotle (`kotel_control.yaml`). Zaji≈°≈•uje dynamickou
# √∫pravu chov√°n√≠ syst√©mu podle re≈æimu (Auto / Eco / Boost / Off) a
# aktivaci Boostu na omezen√Ω ƒças.
#
# üîÑ Hlavn√≠ odpovƒõdnosti:
# 1Ô∏è‚É£ Vyhodnotit, zda je aktivn√≠ **Boost** (ruƒçnƒõ nebo ƒçasovƒõ)
# 2Ô∏è‚É£ Nastavit **blokaci kotle** p≈ôi re≈æimu Off nebo vypnut√≠ masteru
# 3Ô∏è‚É£ Vypoƒç√≠tat **√∫ƒçinn√© prahy (effective_*)** podle re≈æimu:
#     - minim√°ln√≠ poƒçet aktivn√≠ch z√≥n
#     - minim√°ln√≠ pr≈Ømƒõrn√° popt√°vka (%)
#     - zpo≈ædƒõn√≠ ON / OFF (anti-cycling)
# 4Ô∏è‚É£ Automaticky spravovat Boost:
#     - p≈ôi aktivaci nastav√≠ `boost_until = now + boost_minutes`
#     - po vypr≈°en√≠ Boostu zhasne tlaƒç√≠tko `boost_now`
#
# ‚öôÔ∏è FUNKCE PODLE RE≈ΩIMU:
#   üî∏ Auto  ‚Üí pou≈æ√≠v√° z√°kladn√≠ prahy beze zmƒõny
#   üî∏ Eco   ‚Üí p≈ô√≠snƒõj≈°√≠ prahy (vy≈°≈°√≠ n√°roky, del≈°√≠ zpo≈ædƒõn√≠)
#   üî∏ Boost ‚Üí uvolnƒõn√© prahy (rychl√° reakce, del≈°√≠ dobƒõh)
#   üî∏ Off   ‚Üí √∫pln√° blokace sp√≠n√°n√≠ kotle
#
# üß© VSTUPN√ç ENTITY:
#   - input_select.topny_rezim
#   - input_boolean.topny_system_enable
#   - input_boolean.boost_now
#   - input_number.boost_minutes
#   - input_datetime.boost_until
#   - input_number.kotel_min_active_zones
#   - input_number.kotel_min_avg_demand_pct
#   - input_number.kotel_on_delay_sec
#   - input_number.kotel_off_delay_sec
#
# üì§ V√ùSTUPN√ç / ODVOZEN√â ENTITY:
#   - binary_sensor.kotel_boost_active            ‚Üí Boost aktivn√≠ (re≈æim/tlaƒç√≠tko/ƒças)
#   - binary_sensor.kotel_mode_off_block          ‚Üí Blokace sp√≠n√°n√≠ kotle (Off / master OFF)
#   - sensor.kotel_effective_min_active_zones     ‚Üí √öƒçinn√© min. aktivn√≠ z√≥ny
#   - sensor.kotel_effective_min_avg_demand_pct   ‚Üí √öƒçinn√° min. pr≈Ømƒõrn√° popt√°vka (%)
#   - sensor.kotel_effective_on_delay_sec         ‚Üí √öƒçinn√© zpo≈ædƒõn√≠ zapnut√≠ (s)
#   - sensor.kotel_effective_off_delay_sec        ‚Üí √öƒçinn√© zpo≈ædƒõn√≠ vypnut√≠ (s)
#
# üîÅ NAPOJEN√ç:
#   - Tento modul poskytuje v√Ωstupn√≠ hodnoty `effective_*` pro logiku
#     v `kotel_control.yaml`, kter√° ovl√°d√° samotn√© rel√© kotle.
#   - Kotel se sm√≠ zapnout jen tehdy, pokud `kotel_mode_off_block == off`
#     a v≈°echny √∫ƒçinn√© prahy jsou splnƒõny.
#
# üìò STANDARD:
#   - Struktura odpov√≠d√° syst√©mu /config/heating/
#   - Koment√°≈ôe ps√°ny v jednotn√©m stylu pro snadnou √∫dr≈æbu
#   - V≈°echny v√Ωpoƒçty prov√°dƒõny ≈°ablonami (template) bez skript≈Ø
# =====================================================================

template:
  # ‚îÄ‚îÄ BOOST aktivn√≠? ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  - binary_sensor:
      - name: "kotel_boost_active" # Stav: Boost zapnut√Ω
        unique_id: kotel_boost_active
        state: >
          {% set mode  = states('input_select.topny_rezim') %}         # Aktu√°ln√≠ re≈æim
          {% set bn    = is_state('input_boolean.boost_now','on') %}   # Tlaƒç√≠tko Boost
          {% set until = states('input_datetime.boost_until') %}        # ƒåas do kdy plat√≠
          {% set nowts = now().timestamp() %}
          {% set uts   = as_timestamp(until, default=0) %}
          {{ mode == 'Boost' or bn or (nowts < uts) }}                 # Aktivn√≠, pokud aspo≈à jedna podm√≠nka

  # ‚îÄ‚îÄ Blokace kotle (Off / master OFF) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  - binary_sensor:
      - name: "kotel_mode_off_block" # True = nesm√≠ se sp√≠nat
        unique_id: kotel_mode_off_block
        state: >
          {{ is_state('input_select.topny_rezim','Off')                # Re≈æim Off
             or is_state('input_boolean.topny_system_enable','off') }} # Master vypnut

  # ‚îÄ‚îÄ √öƒåINN√â PRAHY dle re≈æimu ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  - sensor:
      - name: "kotel_effective_min_active_zones"
        unique_id: kotel_effective_min_active_zones
        state: >
          {% set mode = states('input_select.topny_rezim') %}
          {% set base = states('input_number.kotel_min_active_zones') | int(0) %}
          {% if mode == 'Eco' %}                                        # P≈ô√≠snƒõj≈°√≠ v Eco
            {{ [1, base + 1] | max }}
          {% elif mode == 'Boost' %}                                    # Uvolnƒõn√© v Boost
            1
          {% else %}  {# Auto i Off #}
            {{ base }}
          {% endif %}

      - name: "kotel_effective_min_avg_demand_pct"
        unique_id: kotel_effective_min_avg_demand_pct
        unit_of_measurement: "%"
        state: >
          {% set mode = states('input_select.topny_rezim') %}
          {% set base = states('input_number.kotel_min_avg_demand_pct') | int(0) %}
          {% if mode == 'Eco' %}                                        # +10 % v Eco
            {{ [0, base + 10] | max }}
          {% elif mode == 'Boost' %}                                    # 0 % v Boost
            0
          {% else %}
            {{ base }}
          {% endif %}

      - name: "kotel_effective_on_delay_sec"
        unique_id: kotel_effective_on_delay_sec
        unit_of_measurement: "s"
        state: >
          {% set mode = states('input_select.topny_rezim') %}
          {% set base = states('input_number.kotel_on_delay_sec') | int(0) %}
          {% if mode == 'Eco' %}                                        # +30 s v Eco
            {{ base + 30 }}
          {% elif mode == 'Boost' %}                                    # 0 s v Boost
            0
          {% else %}
            {{ base }}
          {% endif %}

      - name: "kotel_effective_off_delay_sec"
        unique_id: kotel_effective_off_delay_sec
        unit_of_measurement: "s"
        state: >
          {% set mode = states('input_select.topny_rezim') %}
          {% set base = states('input_number.kotel_off_delay_sec') | int(0) %}
          {% if mode == 'Eco' %}                                        # +60 s v Eco
            {{ base + 60 }}
          {% elif mode == 'Boost' %}                                    # min 300 s dobƒõh v Boost
            {{ [base, 300] | max }}
          {% else %}
            {{ base }}
          {% endif %}

# =====================================================================
# ü§ñ AUTOMATIZACE PRO BOOST
# =====================================================================
automation:
  # ‚ñ∂Ô∏è Start Boostu ‚Äì z re≈æimu nebo tlaƒç√≠tkem
  - id: heating_boost_start
    alias: "Topen√≠: start Boostu (nastav boost_until)"
    mode: restart # Nov√Ω podnƒõt ru≈°√≠ p≈ôedchoz√≠ bƒõh

    # üõéÔ∏è Spou≈°tƒõƒçe
    triggers:
      - trigger: state
        entity_id: input_select.topny_rezim
        to: "Boost" # P≈ôepnuto na Boost
      - trigger: state
        entity_id: input_boolean.boost_now
        to: "on" # Ruƒçn√≠ ‚ÄûBoost nyn√≠‚Äú
    
    # ‚öôÔ∏è Akce
    action:
      - variables:
          minutes: "{{ states('input_number.boost_minutes') | int(60) }}" # Doba trv√°n√≠
      
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.boost_until
        data:
          datetime: "{{ (now() + timedelta(minutes=minutes)).isoformat() }}" # Teƒè + minutes

  # ‚èπ Konec Boostu ‚Äì automaticky zhasni tlaƒç√≠tko po vypr≈°en√≠
  - id: heating_boost_auto_clear_button
    alias: "Topen√≠: po vypr≈°en√≠ Boostu vypnout tlaƒç√≠tko"
    mode: queued # Bez koliz√≠ p≈ôi opakov√°n√≠

    # üõéÔ∏è Spou≈°tƒõƒçe
    triggers:
      - trigger: time_pattern
        minutes: "/1" # Kontrola ka≈ædou minutu
    condition:
      - condition: template
        value_template: >
          {% set until = states('input_datetime.boost_until') %}
          {% set uts   = as_timestamp(until, default=0) %}
          {{ is_state('input_boolean.boost_now','on') and now().timestamp() > uts }}  # Boost pro≈°el?
    action:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.boost_now # Synchronizace UI se stavem
