# =====================================================================
# üî• KOTEL_CONTROL.YAML ‚Äì ≈ò√çZEN√ç KOTLE PODLE POLITIKY TOPEN√ç
# =====================================================================
# üìå C√çL:
# Tento modul zaji≈°≈•uje **automatick√© ≈ô√≠zen√≠ kotle (Aqara T2)** podle
# popt√°vky z√≥n, re≈æimu topen√≠ a konfigurovan√Ωch prah≈Ø. Chr√°n√≠ syst√©m
# proti ƒçast√©mu sp√≠n√°n√≠ a zaji≈°≈•uje efektivn√≠ provoz s ohledem na re≈æimy:
#   - **Auto**  ‚Üí pou≈æ√≠v√° standardn√≠ prahy z policy_config.yaml
#   - **Eco**   ‚Üí vy≈°≈°√≠ prahy = kotel sp√≠n√° m√©nƒõ ƒçasto
#   - **Boost** ‚Üí prahy jsou uvolnƒõny, kotel top√≠ prioritnƒõ
#   - **Off**   ‚Üí √∫pln√° blokace sp√≠n√°n√≠ (kotel v≈ædy vypnut)
#
# ‚öôÔ∏è FUNKCE:
# 1Ô∏è‚É£ Sleduje poƒçet aktivn√≠ch topn√Ωch z√≥n (`sensor.kotel_aktivni_zony_pocet`)
# 2Ô∏è‚É£ Sleduje pr≈Ømƒõrnou popt√°vku z√≥n (`sensor.kotel_poptavka_prumer`)
# 3Ô∏è‚É£ Vyhodnocuje splnƒõn√≠ minim√°ln√≠ch prah≈Ø:
#     - `input_number.kotel_min_active_zones`
#     - `input_number.kotel_min_avg_demand_pct`
# 4Ô∏è‚É£ Pokud jsou prahy splnƒõny a syst√©m nen√≠ blokov√°n:
#     üîπ Sepne Aqara T2 rel√© ‚Üí zapne kotel
# 5Ô∏è‚É£ Pokud prahy p≈ôestanou platit nebo je aktivn√≠ blokace:
#     üîª Po zpo≈ædƒõn√≠ vypne kotel (anti-cycling)
#
# üïí ANTI-CYCLING:
#   - `input_number.kotel_on_delay_sec`  ‚Üí zpo≈ædƒõn√≠ p≈ôed zapnut√≠m
#   - `input_number.kotel_off_delay_sec` ‚Üí zpo≈ædƒõn√≠ p≈ôed vypnut√≠m
#
# üß© VSTUPN√ç ENTITY:
#   - input_boolean.topny_system_enable
#   - input_select.topny_rezim
#   - input_boolean.boost_now
#   - input_datetime.boost_until
#   - input_number.kotel_min_active_zones
#   - input_number.kotel_min_avg_demand_pct
#   - input_number.kotel_on_delay_sec / kotel_off_delay_sec
#   - sensor.kotel_aktivni_zony_pocet / kotel_poptavka_prumer / kotel_poptavka_max
#
# ‚ö° V√ùSTUP:
#   - switch.aqara_lumi_switch_acn047_spinac  (hlavn√≠ rel√© kotle)
#   - binary_sensor.kotel_threshold_*          (stavov√© senzory prah≈Ø)
#
# =====================================================================

# -----------------------------
# ‚úÖ PRAHOV√â BIN√ÅRN√ç SENZORY
# -----------------------------
template:
  - binary_sensor:

      # Splnƒõno: minim√°ln√≠ poƒçet aktivn√≠ch z√≥n
      - name: "kotel_threshold_min_active_zones_ok"                     # True, kdy≈æ je aktivn√≠ch z√≥n ‚â• nastaven√© minimum
        unique_id: kotel_threshold_min_active_zones_ok                  # Stabiln√≠ ID pro UI a automace
        state: >
          {% set aktivni = states('sensor.kotel_aktivni_zony_pocet') | int(0) %}   # Aktu√°ln√≠ poƒçet z√≥n s popt√°vkou
          {% set min_zony = states('input_number.kotel_min_active_zones') | int(1) %}  # Konfig. minimum z√≥n
          {{ aktivni >= min_zony }}                                     # Podm√≠nka: dostateƒçn√Ω poƒçet z√≥n
        device_class: connectivity                                      # V UI se chov√° jako "propojeno/nepropojeno"

      # Splnƒõno: minim√°ln√≠ pr≈Ømƒõrn√° popt√°vka aktivn√≠ch z√≥n (%)
      - name: "kotel_threshold_min_avg_demand_ok"                       # True, kdy≈æ pr≈Ømƒõrn√° popt√°vka ‚â• pr√°h
        unique_id: kotel_threshold_min_avg_demand_ok                    # Stabiln√≠ ID
        state: >
          {% set avg = states('sensor.kotel_poptavka_prumer') | float(0) %}   # Pr≈Ømƒõrn√° popt√°vka (0‚Äì100 %)
          {% set min_avg = states('input_number.kotel_min_avg_demand_pct') | float(15) %}  # Konfig. minimum %
          {{ avg >= min_avg }}                                          # Podm√≠nka: dostateƒçn√° pr≈Ømƒõrn√° popt√°vka
        device_class: connectivity

      # üîÅ HLAVN√ç PR√ÅH ‚Äì V≈†ECHNY PODM√çNKY MUS√ç PLATIT (AND)
      # (d≈ô√≠ve to bylo OR ‚Üí zp≈Øsobovalo zbyteƒçn√© sepnut√≠ p≈ôi mal√© popt√°vce)
      - name: "kotel_threshold_any_ok"                                  # Hlavn√≠ agregovan√Ω pr√°h (AND)
        unique_id: kotel_threshold_all_ok   # ID m≈Ø≈æe z≈Østat jin√©; entity_id z≈Østane podle name  # Pozn.: nemƒõn√≠ entity_id
        icon: mdi:checkbox-marked-circle                                # Piktogram pro rychl√© ƒçten√≠ stavu
        state: >
          {{ is_state('binary_sensor.kotel_threshold_min_active_zones_ok','on')   # Mus√≠ b√Ωt splnƒõn poƒçet z√≥n
             and is_state('binary_sensor.kotel_threshold_min_avg_demand_ok','on') }} # I min. pr≈Ømƒõrn√° popt√°vka

# -----------------------------
# ‚öôÔ∏è AUTOMATIZACE (BEZE ZMƒöNY)
# -----------------------------
automation:

  # ---------------------------------------------------------------
  # ‚ñ∂Ô∏è ZAPNOUT KOTEL
  # ---------------------------------------------------------------
  - id: kotel_turn_on_by_policy                                       # Unik√°tn√≠ ID automace
    alias: "Kotel: zapnout p≈ôi splnƒõn√≠ politiky"                      # Srozumiteln√Ω n√°zev v UI
    description: "Zapne rel√© kotle po zpo≈ædƒõn√≠, pokud plat√≠ prahy a nen√≠ blokace." # Shrnut√≠ chov√°n√≠
    mode: restart  # nov√° zmƒõna zru≈°√≠ p≈ôedchoz√≠ bƒõh (aby se delay nep≈ôekr√Ωval)     # Chr√°n√≠ proti soubƒõh≈Øm trigger≈Ø

    trigger:
      - platform: state
        entity_id:
          - binary_sensor.kotel_threshold_any_ok                       # P≈ôeklopen√≠ hlavn√≠ho prahu
          - binary_sensor.kotel_mode_off_block                         # Blokace v re≈æimu Off
          - input_boolean.topny_system_enable                          # Master ON/OFF
          - input_select.topny_rezim                                   # Zmƒõna re≈æimu (Auto/Eco/Boost/Off)
          - input_boolean.boost_now                                    # Okam≈æit√Ω Boost
          - input_datetime.boost_until                                 # Konec ƒçasov√©ho Boostu
          - input_number.kotel_on_delay_sec                            # Zmƒõna ON zpo≈ædƒõn√≠
          - sensor.kotel_aktivni_zony_pocet                            # Zmƒõna poƒçtu aktivn√≠ch z√≥n
          - sensor.kotel_poptavka_prumer                               # Zmƒõna pr≈Ømƒõrn√© popt√°vky
          - sensor.kotel_poptavka_max                                  # (Voliteln√©) pro budouc√≠ logiku max popt√°vky

    # Zapneme, kdy≈æ:
    # - master je ON
    # - re≈æim nen√≠ Off (tj. kotel_mode_off_block == off)
    # - a (min. aktivn√≠ z√≥ny) ‚àß (min. pr≈Ømƒõrn√° popt√°vka)
    condition:
      - condition: state
        entity_id: input_boolean.topny_system_enable
        state: "on"                                                    # Master povoluje topn√Ω syst√©m
      - condition: state
        entity_id: binary_sensor.kotel_mode_off_block
        state: "off"                                                   # Nesm√≠ b√Ωt glob√°ln√≠ blokace (re≈æim Off)
      - condition: state
        entity_id: binary_sensor.kotel_threshold_any_ok
        state: "on"                                                    # Mus√≠ b√Ωt splnƒõny prahy

    action:
      # ‚è≥ Anti-cycling zpo≈ædƒõn√≠ (konfigurovateln√©)
      - delay:
          seconds: "{{ states('input_number.kotel_on_delay_sec') | int(0) }}"  # Odd√°l√≠ zapnut√≠, sn√≠≈æ√≠ cyklov√°n√≠

      # ‚úÖ Re-check po zpo≈ædƒõn√≠
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.topny_system_enable
                state: "on"                                            # St√°le povoleno?
              - condition: state
                entity_id: binary_sensor.kotel_mode_off_block
                state: "off"                                           # St√°le nen√≠ blokace?
              - condition: state
                entity_id: binary_sensor.kotel_threshold_any_ok
                state: "on"                                            # St√°le plat√≠ prahy?
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: switch.aqara_lumi_switch_acn047_spinac     # Aqara T2 rel√© ‚Äì sepni (kotel ON)

  # ---------------------------------------------------------------
  # ‚èπ VYPNOUT KOTEL
  # ---------------------------------------------------------------
  - id: kotel_turn_off_by_policy                                      # Unik√°tn√≠ ID automace
    alias: "Kotel: vypnout p≈ôi nesplnƒõn√≠ politiky / blokaci"          # P≈ôehledn√Ω n√°zev v UI
    description: "Vypne rel√© kotle po zpo≈ædƒõn√≠, kdy≈æ prahy neplat√≠, re≈æim je Off, nebo master OFF."
    mode: restart                                                      # Restart zajist√≠, ≈æe se nov√° situace projev√≠ okam≈æitƒõ

    trigger:
      - platform: state
        entity_id:
          - binary_sensor.kotel_threshold_any_ok                       # Zmƒõna agregovan√©ho prahu
          - binary_sensor.kotel_mode_off_block                         # P≈ôepnut√≠ do/ze stavu Off
          - input_boolean.topny_system_enable                          # Master ON/OFF
          - input_select.topny_rezim
          - input_boolean.boost_now
          - input_datetime.boost_until
          - input_number.kotel_off_delay_sec                           # Zmƒõna OFF zpo≈ædƒõn√≠
          - sensor.kotel_aktivni_zony_pocet
          - sensor.kotel_poptavka_prumer
          - sensor.kotel_poptavka_max

    condition: []                                                      # Z√°mƒõrnƒõ bez podm√≠nek ‚Äì ≈ôe≈°√≠ se v choose

    action:
      - choose:
          # ‚õî Master OFF
          - conditions:
              - condition: state
                entity_id: input_boolean.topny_system_enable
                state: "off"                                           # Glob√°ln√≠ vypnut√≠ syst√©mu
            sequence:
              - delay:
                  seconds: "{{ states('input_number.kotel_off_delay_sec') | int(0) }}" # Anti-cycling zpo≈ædƒõn√≠ vypnut√≠
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: input_boolean.topny_system_enable
                        state: "off"                                   # Re-check: st√°le OFF?
                    sequence:
                      - service: switch.turn_off
                        target:
                          entity_id: switch.aqara_lumi_switch_acn047_spinac # Vypni kotel

          # ‚õî Re≈æim Off
          - conditions:
              - condition: state
                entity_id: binary_sensor.kotel_mode_off_block
                state: "on"                                            # Blokace kv≈Øli re≈æimu Off
            sequence:
              - delay:
                  seconds: "{{ states('input_number.kotel_off_delay_sec') | int(0) }}" # Zpo≈ædƒõn√≠ vypnut√≠
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: binary_sensor.kotel_mode_off_block
                        state: "on"                                    # Re-check: st√°le blokace?
                    sequence:
                      - service: switch.turn_off
                        target:
                          entity_id: switch.aqara_lumi_switch_acn047_spinac

          # ‚õî Nesplnƒõn√© prahy
          - conditions:
              - condition: state
                entity_id: binary_sensor.kotel_threshold_any_ok
                state: "off"                                           # Agregovan√Ω pr√°h nesplnƒõn
            sequence:
              - delay:
                  seconds: "{{ states('input_number.kotel_off_delay_sec') | int(0) }}" # Zpo≈ædƒõn√≠ vypnut√≠
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: binary_sensor.kotel_threshold_any_ok
                        state: "off"                                   # Re-check: prahy st√°le nesplnƒõny?
                    sequence:
                      - service: switch.turn_off
                        target:
                          entity_id: switch.aqara_lumi_switch_acn047_spinac # Vypni kotel
