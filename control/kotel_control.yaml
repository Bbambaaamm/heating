# =====================================================================
# üîå KOTEL ‚Äì ≈ò√çZEN√ç REL√â (Aqara T2) PODLE POLITIKY A PO≈ΩADAVKU Z√ìN
# - Zap√≠n√°, kdy≈æ jsou splnƒõny prahy (min. aktivn√≠ch z√≥n NEBO min. pr≈Ømƒõrn√° popt√°vka)
# - Vyp√≠n√°, kdy≈æ prahy p≈ôestanou platit, nebo je re≈æim Off / master OFF
# - Respektuje konfigurovateln√° zpo≈ædƒõn√≠ (anti-cycling)
# - Po zpo≈ædƒõn√≠ dƒõl√° ‚Äûre-check‚Äú, aby necvakal p≈ôi rychl√Ωch zmƒõn√°ch
# =====================================================================

automation:

  # ---------------------------------------------------------------
  # ‚ñ∂Ô∏è ZAPNOUT KOTEL
  # ---------------------------------------------------------------
  - id: kotel_turn_on_by_policy
    alias: "Kotel: zapnout p≈ôi splnƒõn√≠ politiky"
    description: "Zapne rel√© kotle po zpo≈ædƒõn√≠, pokud plat√≠ prahy a nen√≠ blokace."
    mode: restart  # nov√° zmƒõna zru≈°√≠ p≈ôedchoz√≠ bƒõh (aby se delay nep≈ôekr√Ωval)

    # Reaguj na v≈°echny relevantn√≠ zmƒõny
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.kotel_threshold_any_ok
          - binary_sensor.kotel_mode_off_block
          - input_boolean.topny_system_enable
          - input_select.topny_rezim
          - input_boolean.boost_now
          - input_datetime.boost_until
          - input_number.kotel_on_delay_sec
          - sensor.kotel_aktivni_zony_pocet
          - sensor.kotel_poptavka_prumer
          - sensor.kotel_poptavka_max

    # Zap√≠n√°me jen kdy≈æ:
    # - master je ON
    # - re≈æim nen√≠ Off (tj. kotel_mode_off_block == off)
    # - je splnƒõna ALESPO≈á jedna podm√≠nka (min. aktivn√≠ z√≥ny NEBO min. pr≈Ømƒõrn√° popt√°vka)
    condition:
      - condition: state
        entity_id: input_boolean.topny_system_enable
        state: "on"
      - condition: state
        entity_id: binary_sensor.kotel_mode_off_block
        state: "off"
      - condition: state
        entity_id: binary_sensor.kotel_threshold_any_ok
        state: "on"

    action:
      # ‚è≥ Anti-cycling zpo≈ædƒõn√≠ (konfigurovateln√©)
      - delay:
          seconds: "{{ states('input_number.kotel_on_delay_sec') | int(0) }}"

      # ‚úÖ Re-check po zpo≈ædƒõn√≠ (jestli podm√≠nky po≈ô√°d plat√≠)
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.topny_system_enable
                state: "on"
              - condition: state
                entity_id: binary_sensor.kotel_mode_off_block
                state: "off"
              - condition: state
                entity_id: binary_sensor.kotel_threshold_any_ok
                state: "on"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: switch.aqara_lumi_switch_acn047_spinac

  # ---------------------------------------------------------------
  # ‚èπ VYPNOUT KOTEL
  # ---------------------------------------------------------------
  - id: kotel_turn_off_by_policy
    alias: "Kotel: vypnout p≈ôi nesplnƒõn√≠ politiky / blokaci"
    description: "Vypne rel√© kotle po zpo≈ædƒõn√≠, kdy≈æ prahy neplat√≠, re≈æim je Off, nebo master OFF."
    mode: restart

    trigger:
      - platform: state
        entity_id:
          - binary_sensor.kotel_threshold_any_ok
          - binary_sensor.kotel_mode_off_block
          - input_boolean.topny_system_enable
          - input_select.topny_rezim
          - input_boolean.boost_now
          - input_datetime.boost_until
          - input_number.kotel_off_delay_sec
          - sensor.kotel_aktivni_zony_pocet
          - sensor.kotel_poptavka_prumer
          - sensor.kotel_poptavka_max

    # Vyp√≠n√°me, kdy≈æ:
    # - master je OFF  NEBO
    # - re≈æim je Off (kotel_mode_off_block == on) NEBO
    # - prahy NEJSOU splnƒõny (kotel_threshold_any_ok == off)
    condition: []

    action:
      - choose:
          # ‚õî Master OFF
          - conditions:
              - condition: state
                entity_id: input_boolean.topny_system_enable
                state: "off"
            sequence:
              - delay:
                  seconds: "{{ states('input_number.kotel_off_delay_sec') | int(0) }}"
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: input_boolean.topny_system_enable
                        state: "off"
                    sequence:
                      - service: switch.turn_off
                        target:
                          entity_id: switch.aqara_lumi_switch_acn047_spinac

          # ‚õî Re≈æim Off
          - conditions:
              - condition: state
                entity_id: binary_sensor.kotel_mode_off_block
                state: "on"
            sequence:
              - delay:
                  seconds: "{{ states('input_number.kotel_off_delay_sec') | int(0) }}"
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: binary_sensor.kotel_mode_off_block
                        state: "on"
                    sequence:
                      - service: switch.turn_off
                        target:
                          entity_id: switch.aqara_lumi_switch_acn047_spinac

          # ‚õî Nesplnƒõn√© prahy
          - conditions:
              - condition: state
                entity_id: binary_sensor.kotel_threshold_any_ok
                state: "off"
            sequence:
              - delay:
                  seconds: "{{ states('input_number.kotel_off_delay_sec') | int(0) }}"
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: binary_sensor.kotel_threshold_any_ok
                        state: "off"
                    sequence:
                      - service: switch.turn_off
                        target:
                          entity_id: switch.aqara_lumi_switch_acn047_spinac
